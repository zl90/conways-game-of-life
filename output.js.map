{"version":3,"file":"output.js","mappings":"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","sources":["webpack://conways-game-of-life/./index.js","webpack://conways-game-of-life/./src/colors.js","webpack://conways-game-of-life/./src/main.js","webpack://conways-game-of-life/./src/seed.js","webpack://conways-game-of-life/webpack/bootstrap","webpack://conways-game-of-life/webpack/startup"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst main_1 = __importDefault(require(\"./src/main\"));\n(0, main_1.default)();\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Colors = {\n    GRID_LINES: \"#2d333d\",\n    CELL_ALIVE: \"#f0aa29\",\n    CELL_DEAD: \"#212730\",\n};\nexports.default = Colors;\n//# sourceMappingURL=colors.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst colors_1 = __importDefault(require(\"./colors\"));\nconst seed_1 = require(\"./seed\");\nconst CANVAS_WIDTH_IN_PIXELS = 600;\nconst CANVAS_HEIGHT_IN_PIXELS = 600;\nconst GRID_WIDTH_IN_CELLS = 40;\nconst GRID_HEIGHT_IN_CELLS = 40;\nconst GRID_LINE_WIDTH_IN_PIXELS = 1;\nconst CELL_WIDTH_IN_PIXELS = CANVAS_WIDTH_IN_PIXELS / GRID_WIDTH_IN_CELLS;\nconst CELL_HEIGHT_IN_PIXELS = CANVAS_HEIGHT_IN_PIXELS / GRID_HEIGHT_IN_CELLS;\nconst TIME_INTERVAL_IN_SECONDS = 0.33;\nlet intervalId;\nlet isPaused = true;\nconst CANVAS_ID = \"canvas\";\nconst NEXT_BUTTON_ID = \"button-next\";\nconst PLAY_BUTTON_ID = \"button-play\";\nconst PAUSE_BUTTON_ID = \"button-pause\";\nconst CLEAR_BUTTON_ID = \"button-clear\";\nconst canvas = document.getElementById(CANVAS_ID);\nconst context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext(\"2d\");\nconst nextStepButton = document.getElementById(NEXT_BUTTON_ID);\nconst playButton = document.getElementById(PLAY_BUTTON_ID);\nconst pauseButton = document.getElementById(PAUSE_BUTTON_ID);\nconst clearButton = document.getElementById(CLEAR_BUTTON_ID);\nif (!canvas || !context) {\n    throw new Error(\"Canvas API unsupported on this browser\");\n}\nconst board = [];\nconst nextBoard = [];\nconst isSeedValid = seed_1.initialBoard.length === GRID_HEIGHT_IN_CELLS &&\n    seed_1.initialBoard[0].length === GRID_WIDTH_IN_CELLS;\nconst getBoardPositionFromCanvasPosition = (x, y) => {\n    const row = Math.floor(y / CELL_HEIGHT_IN_PIXELS);\n    const col = Math.floor(x / CELL_WIDTH_IN_PIXELS);\n    return { row, col };\n};\nconst getCanvasPositionFromBoardPosition = (row, col) => {\n    const x = col * CELL_WIDTH_IN_PIXELS;\n    const y = row * CELL_HEIGHT_IN_PIXELS;\n    return { x, y };\n};\nconst getNumNeighbours = (row, col) => {\n    const convolution = [\n        [\n            { row: row - 1, col: col - 1 },\n            { row: row - 1, col: col },\n            { row: row - 1, col: col + 1 },\n        ],\n        [\n            { row: row, col: col - 1 },\n            { row: row, col: col + 1 },\n        ],\n        [\n            { row: row + 1, col: col - 1 },\n            { row: row + 1, col: col },\n            { row: row + 1, col: col + 1 },\n        ],\n    ];\n    let numNeighbours = 0;\n    convolution.forEach((convRow) => convRow.forEach((convItem) => {\n        if (convItem.row >= 0 &&\n            convItem.row < GRID_HEIGHT_IN_CELLS &&\n            convItem.col >= 0 &&\n            convItem.col < GRID_WIDTH_IN_CELLS &&\n            board[convItem.row][convItem.col] === \"alive\") {\n            numNeighbours++;\n        }\n    }));\n    return numNeighbours;\n};\nconst generateNextBoard = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            const numNeighbours = getNumNeighbours(row, col);\n            if (board[row][col] === \"alive\") {\n                if (numNeighbours <= 1 || numNeighbours >= 4) {\n                    nextBoard[row][col] = \"dead\";\n                }\n                else {\n                    nextBoard[row][col] = \"alive\";\n                }\n            }\n            else {\n                if (numNeighbours === 3) {\n                    nextBoard[row][col] = \"alive\";\n                }\n                else {\n                    nextBoard[row][col] = \"dead\";\n                }\n            }\n        }\n    }\n};\nconst goToNextStep = () => {\n    generateNextBoard();\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            board[row][col] = nextBoard[row][col];\n        }\n    }\n    render();\n};\nconst nextStep = () => {\n    pause();\n    goToNextStep();\n};\nconst handleClick = (e) => {\n    pause();\n    const boardPosition = getBoardPositionFromCanvasPosition(e.offsetX, e.offsetY);\n    if (board[boardPosition.row][boardPosition.col] === \"alive\") {\n        board[boardPosition.row][boardPosition.col] = \"dead\";\n    }\n    else {\n        board[boardPosition.row][boardPosition.col] = \"alive\";\n    }\n    render();\n};\nconst initialiseBoard = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        board.push(Array(GRID_WIDTH_IN_CELLS).fill(\"dead\"));\n        nextBoard.push(Array(GRID_WIDTH_IN_CELLS).fill(\"dead\"));\n    }\n    if (isSeedValid) {\n        for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n            for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n                board[row][col] = seed_1.initialBoard[row][col];\n                nextBoard[row][col] = seed_1.initialBoard[row][col];\n            }\n        }\n    }\n};\nconst initialiseButtons = () => {\n    nextStepButton.addEventListener(\"click\", nextStep);\n    playButton.addEventListener(\"click\", play);\n    pauseButton.addEventListener(\"click\", pause);\n    clearButton.addEventListener(\"click\", clear);\n};\nconst initialiseCanvas = () => {\n    canvas.addEventListener(\"click\", handleClick);\n    canvas.height = CANVAS_HEIGHT_IN_PIXELS;\n    canvas.width = CANVAS_WIDTH_IN_PIXELS;\n};\nconst drawGridLines = () => {\n    const previousFillStyle = context.fillStyle;\n    context.fillStyle = colors_1.default.GRID_LINES;\n    for (let i = 1; i < GRID_WIDTH_IN_CELLS; i++) {\n        const endOfCellX = i * CELL_WIDTH_IN_PIXELS;\n        context.fillRect(endOfCellX, 0, GRID_LINE_WIDTH_IN_PIXELS, CANVAS_HEIGHT_IN_PIXELS);\n    }\n    for (let i = 1; i < GRID_HEIGHT_IN_CELLS; i++) {\n        const endOfCellY = i * CELL_HEIGHT_IN_PIXELS;\n        context.fillRect(0, endOfCellY, CANVAS_WIDTH_IN_PIXELS, GRID_LINE_WIDTH_IN_PIXELS);\n    }\n    context.fillStyle = previousFillStyle;\n};\nconst drawCell = (row, col) => {\n    const canvasPosition = getCanvasPositionFromBoardPosition(row, col);\n    context.fillStyle =\n        board[row][col] === \"alive\" ? colors_1.default.CELL_ALIVE : colors_1.default.CELL_DEAD;\n    context.fillRect(canvasPosition.x, canvasPosition.y, CELL_WIDTH_IN_PIXELS, CELL_HEIGHT_IN_PIXELS);\n};\nconst render = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            drawCell(row, col);\n        }\n    }\n    drawGridLines();\n};\nconst play = () => {\n    if (isPaused) {\n        isPaused = false;\n        goToNextStep();\n        progressTime();\n    }\n};\nconst pause = () => {\n    isPaused = true;\n    clearInterval(intervalId);\n};\nconst progressTime = () => {\n    if (!isPaused) {\n        intervalId = setInterval(goToNextStep, TIME_INTERVAL_IN_SECONDS * 1000);\n    }\n};\nconst clear = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            board[row][col] = \"dead\";\n            nextBoard[row][col] = \"dead\";\n        }\n    }\n    pause();\n    render();\n};\nconst main = () => {\n    initialiseCanvas();\n    initialiseButtons();\n    initialiseBoard();\n    render();\n};\nexports.default = main;\n//# sourceMappingURL=main.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initialBoard = void 0;\nexports.initialBoard = [\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n];\n//# sourceMappingURL=seed.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(10);\n"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","default","GRID_LINES","CELL_ALIVE","CELL_DEAD","colors_1","seed_1","GRID_WIDTH_IN_CELLS","GRID_HEIGHT_IN_CELLS","intervalId","isPaused","canvas","document","getElementById","context","getContext","nextStepButton","playButton","pauseButton","clearButton","Error","board","nextBoard","isSeedValid","initialBoard","length","getNumNeighbours","row","col","numNeighbours","forEach","convRow","convItem","goToNextStep","generateNextBoard","render","nextStep","pause","handleClick","e","boardPosition","x","offsetX","y","offsetY","Math","floor","CANVAS_HEIGHT_IN_PIXELS","CANVAS_WIDTH_IN_PIXELS","drawCell","canvasPosition","getCanvasPositionFromBoardPosition","fillStyle","fillRect","previousFillStyle","i","endOfCellX","endOfCellY","drawGridLines","play","progressTime","clearInterval","setInterval","TIME_INTERVAL_IN_SECONDS","clear","addEventListener","height","width","push","Array","fill","initialiseBoard","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","call"],"sourceRoot":""}