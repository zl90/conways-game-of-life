{"version":3,"file":"output.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,mBAAO,CAAC,iCAAY;AACnD;AACA;;;;;;;;;;ACPa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;ACRa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC,mBAAO,CAAC,iCAAU;AACnD,eAAe,mBAAO,CAAC,6BAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,cAAc,4BAA4B;AAC1C,cAAc,wBAAwB;AACtC,cAAc,4BAA4B;AAC1C;AACA;AACA,cAAc,wBAAwB;AACtC,cAAc,wBAAwB;AACtC;AACA;AACA,cAAc,4BAA4B;AAC1C,cAAc,wBAAwB;AACtC,cAAc,4BAA4B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD,0BAA0B,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD,0BAA0B,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD,8BAA8B,2BAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD,0BAA0B,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD,0BAA0B,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;AC9Ma;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,oBAAoB;AACppDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://conways-game-of-life/./index.js","webpack://conways-game-of-life/./src/colors.js","webpack://conways-game-of-life/./src/main.js","webpack://conways-game-of-life/./src/seed.js","webpack://conways-game-of-life/webpack/bootstrap","webpack://conways-game-of-life/webpack/before-startup","webpack://conways-game-of-life/webpack/startup","webpack://conways-game-of-life/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst main_1 = __importDefault(require(\"./src/main\"));\n(0, main_1.default)();\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Colors = {\n    GRID_LINES: \"#2d333d\",\n    CELL_ALIVE: \"#f0aa29\",\n    CELL_DEAD: \"#212730\",\n};\nexports.default = Colors;\n//# sourceMappingURL=colors.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst colors_1 = __importDefault(require(\"./colors\"));\nconst seed_1 = require(\"./seed\");\nconst CANVAS_WIDTH_IN_PIXELS = 600;\nconst CANVAS_HEIGHT_IN_PIXELS = 600;\nconst GRID_WIDTH_IN_CELLS = 40;\nconst GRID_HEIGHT_IN_CELLS = 40;\nconst GRID_LINE_WIDTH_IN_PIXELS = 1;\nconst CELL_WIDTH_IN_PIXELS = CANVAS_WIDTH_IN_PIXELS / GRID_WIDTH_IN_CELLS;\nconst CELL_HEIGHT_IN_PIXELS = CANVAS_HEIGHT_IN_PIXELS / GRID_HEIGHT_IN_CELLS;\nconst TIME_INTERVAL_IN_SECONDS = 0.33;\nlet intervalId;\nlet isPaused = true;\nconst CANVAS_ID = \"canvas\";\nconst NEXT_BUTTON_ID = \"button-next\";\nconst PLAY_BUTTON_ID = \"button-play\";\nconst PAUSE_BUTTON_ID = \"button-pause\";\nconst CLEAR_BUTTON_ID = \"button-clear\";\nconst canvas = document.getElementById(CANVAS_ID);\nconst context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext(\"2d\");\nconst nextStepButton = document.getElementById(NEXT_BUTTON_ID);\nconst playButton = document.getElementById(PLAY_BUTTON_ID);\nconst pauseButton = document.getElementById(PAUSE_BUTTON_ID);\nconst clearButton = document.getElementById(CLEAR_BUTTON_ID);\nif (!canvas || !context) {\n    throw new Error(\"Canvas API unsupported on this browser\");\n}\nconst board = [];\nconst nextBoard = [];\nconst isSeedValid = seed_1.initialBoard.length === GRID_HEIGHT_IN_CELLS &&\n    seed_1.initialBoard[0].length === GRID_WIDTH_IN_CELLS;\nconst getBoardPositionFromCanvasPosition = (x, y) => {\n    const row = Math.floor(y / CELL_HEIGHT_IN_PIXELS);\n    const col = Math.floor(x / CELL_WIDTH_IN_PIXELS);\n    return { row, col };\n};\nconst getCanvasPositionFromBoardPosition = (row, col) => {\n    const x = col * CELL_WIDTH_IN_PIXELS;\n    const y = row * CELL_HEIGHT_IN_PIXELS;\n    return { x, y };\n};\nconst getNumNeighbours = (row, col) => {\n    const convolution = [\n        [\n            { row: row - 1, col: col - 1 },\n            { row: row - 1, col: col },\n            { row: row - 1, col: col + 1 },\n        ],\n        [\n            { row: row, col: col - 1 },\n            { row: row, col: col + 1 },\n        ],\n        [\n            { row: row + 1, col: col - 1 },\n            { row: row + 1, col: col },\n            { row: row + 1, col: col + 1 },\n        ],\n    ];\n    let numNeighbours = 0;\n    convolution.forEach((convRow) => convRow.forEach((convItem) => {\n        if (convItem.row >= 0 &&\n            convItem.row < GRID_HEIGHT_IN_CELLS &&\n            convItem.col >= 0 &&\n            convItem.col < GRID_WIDTH_IN_CELLS &&\n            board[convItem.row][convItem.col] === \"alive\") {\n            numNeighbours++;\n        }\n    }));\n    return numNeighbours;\n};\nconst generateNextBoard = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            const numNeighbours = getNumNeighbours(row, col);\n            if (board[row][col] === \"alive\") {\n                if (numNeighbours <= 1 || numNeighbours >= 4) {\n                    nextBoard[row][col] = \"dead\";\n                }\n                else {\n                    nextBoard[row][col] = \"alive\";\n                }\n            }\n            else {\n                if (numNeighbours === 3) {\n                    nextBoard[row][col] = \"alive\";\n                }\n                else {\n                    nextBoard[row][col] = \"dead\";\n                }\n            }\n        }\n    }\n};\nconst goToNextStep = () => {\n    generateNextBoard();\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            board[row][col] = nextBoard[row][col];\n        }\n    }\n    render();\n};\nconst nextStep = () => {\n    pause();\n    goToNextStep();\n};\nconst handleClick = (e) => {\n    pause();\n    const boardPosition = getBoardPositionFromCanvasPosition(e.offsetX, e.offsetY);\n    if (board[boardPosition.row][boardPosition.col] === \"alive\") {\n        board[boardPosition.row][boardPosition.col] = \"dead\";\n    }\n    else {\n        board[boardPosition.row][boardPosition.col] = \"alive\";\n    }\n    render();\n};\nconst initialiseBoard = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        board.push(Array(GRID_WIDTH_IN_CELLS).fill(\"dead\"));\n        nextBoard.push(Array(GRID_WIDTH_IN_CELLS).fill(\"dead\"));\n    }\n    if (isSeedValid) {\n        for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n            for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n                board[row][col] = seed_1.initialBoard[row][col];\n                nextBoard[row][col] = seed_1.initialBoard[row][col];\n            }\n        }\n    }\n};\nconst initialiseButtons = () => {\n    nextStepButton.addEventListener(\"click\", nextStep);\n    playButton.addEventListener(\"click\", play);\n    pauseButton.addEventListener(\"click\", pause);\n    clearButton.addEventListener(\"click\", clear);\n};\nconst initialiseCanvas = () => {\n    canvas.addEventListener(\"click\", handleClick);\n    canvas.height = CANVAS_HEIGHT_IN_PIXELS;\n    canvas.width = CANVAS_WIDTH_IN_PIXELS;\n};\nconst drawGridLines = () => {\n    const previousFillStyle = context.fillStyle;\n    context.fillStyle = colors_1.default.GRID_LINES;\n    for (let i = 1; i < GRID_WIDTH_IN_CELLS; i++) {\n        const endOfCellX = i * CELL_WIDTH_IN_PIXELS;\n        context.fillRect(endOfCellX, 0, GRID_LINE_WIDTH_IN_PIXELS, CANVAS_HEIGHT_IN_PIXELS);\n    }\n    for (let i = 1; i < GRID_HEIGHT_IN_CELLS; i++) {\n        const endOfCellY = i * CELL_HEIGHT_IN_PIXELS;\n        context.fillRect(0, endOfCellY, CANVAS_WIDTH_IN_PIXELS, GRID_LINE_WIDTH_IN_PIXELS);\n    }\n    context.fillStyle = previousFillStyle;\n};\nconst drawCell = (row, col) => {\n    const canvasPosition = getCanvasPositionFromBoardPosition(row, col);\n    context.fillStyle =\n        board[row][col] === \"alive\" ? colors_1.default.CELL_ALIVE : colors_1.default.CELL_DEAD;\n    context.fillRect(canvasPosition.x, canvasPosition.y, CELL_WIDTH_IN_PIXELS, CELL_HEIGHT_IN_PIXELS);\n};\nconst render = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            drawCell(row, col);\n        }\n    }\n    drawGridLines();\n};\nconst play = () => {\n    if (isPaused) {\n        isPaused = false;\n        goToNextStep();\n        progressTime();\n    }\n};\nconst pause = () => {\n    isPaused = true;\n    clearInterval(intervalId);\n};\nconst progressTime = () => {\n    if (!isPaused) {\n        intervalId = setInterval(goToNextStep, TIME_INTERVAL_IN_SECONDS * 1000);\n    }\n};\nconst clear = () => {\n    for (let row = 0; row < GRID_HEIGHT_IN_CELLS; row++) {\n        for (let col = 0; col < GRID_WIDTH_IN_CELLS; col++) {\n            board[row][col] = \"dead\";\n            nextBoard[row][col] = \"dead\";\n        }\n    }\n    pause();\n    render();\n};\nconst main = () => {\n    initialiseCanvas();\n    initialiseButtons();\n    initialiseBoard();\n    render();\n};\nexports.default = main;\n//# sourceMappingURL=main.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initialBoard = void 0;\nexports.initialBoard = [\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"alive\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n    [\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n        \"dead\",\n    ],\n];\n//# sourceMappingURL=seed.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n",""],"names":[],"sourceRoot":""}